// Code generated by dagger-compiler.  Do not edit.
package br.com.mobiclub.quantoprima.config.module;


import dagger.internal.Binding;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class ServiceModule$$ModuleAdapter extends ModuleAdapter<ServiceModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { br.com.mobiclub.quantoprima.config.module.MobiClubModule.class, br.com.mobiclub.quantoprima.config.module.AndroidModule.class, };

  public ServiceModule$$ModuleAdapter() {
    super(INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  protected ServiceModule newModule() {
    return new br.com.mobiclub.quantoprima.config.module.ServiceModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(Map<String, Binding<?>> map) {
    map.put("br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider", new ProvideBootstrapServiceProviderProvidesAdapter(module));
    map.put("br.com.mobiclub.quantoprima.service.authenticator.LogoutService", new ProvideLogoutServiceProvidesAdapter(module));
    map.put("br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider", new ProvideApiKeyProviderProvidesAdapter(module));
    map.put("com.google.gson.Gson", new ProvideGsonProvidesAdapter(module));
    map.put("br.com.mobiclub.quantoprima.core.service.RestErrorHandler", new ProvideRestErrorHandlerProvidesAdapter(module));
    map.put("br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor", new ProvideRestAdapterRequestInterceptorProvidesAdapter(module));
  }

  /**
   * A {@code Binder<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider} and its
   * dependencies.
   * 
   * Being a {@code Provider<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideBootstrapServiceProviderProvidesAdapter extends Binding<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider>
      implements Provider<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider> {
    private final ServiceModule module;
    private Binding<br.com.mobiclub.quantoprima.core.service.MobiClubServiceApi> mobiClubService;
    private Binding<retrofit.RestAdapter> restAdapter;
    private Binding<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider> apiKeyProvider;

    public ProvideBootstrapServiceProviderProvidesAdapter(ServiceModule module) {
      super("br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider", null, NOT_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideBootstrapServiceProvider()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      mobiClubService = (Binding<br.com.mobiclub.quantoprima.core.service.MobiClubServiceApi>) linker.requestBinding("br.com.mobiclub.quantoprima.core.service.MobiClubServiceApi", ServiceModule.class);
      restAdapter = (Binding<retrofit.RestAdapter>) linker.requestBinding("retrofit.RestAdapter", ServiceModule.class);
      apiKeyProvider = (Binding<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider>) linker.requestBinding("br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider", ServiceModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(mobiClubService);
      getBindings.add(restAdapter);
      getBindings.add(apiKeyProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider>}.
     */
    @Override
    public br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider get() {
      return module.provideBootstrapServiceProvider(mobiClubService.get(), restAdapter.get(), apiKeyProvider.get());
    }
  }

  /**
   * A {@code Binder<br.com.mobiclub.quantoprima.service.authenticator.LogoutService>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code br.com.mobiclub.quantoprima.service.authenticator.LogoutService} and its
   * dependencies.
   * 
   * Being a {@code Provider<br.com.mobiclub.quantoprima.service.authenticator.LogoutService>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideLogoutServiceProvidesAdapter extends Binding<br.com.mobiclub.quantoprima.service.authenticator.LogoutService>
      implements Provider<br.com.mobiclub.quantoprima.service.authenticator.LogoutService> {
    private final ServiceModule module;
    private Binding<android.content.Context> context;
    private Binding<android.accounts.AccountManager> accountManager;

    public ProvideLogoutServiceProvidesAdapter(ServiceModule module) {
      super("br.com.mobiclub.quantoprima.service.authenticator.LogoutService", null, IS_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideLogoutService()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      context = (Binding<android.content.Context>) linker.requestBinding("android.content.Context", ServiceModule.class);
      accountManager = (Binding<android.accounts.AccountManager>) linker.requestBinding("android.accounts.AccountManager", ServiceModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(context);
      getBindings.add(accountManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<br.com.mobiclub.quantoprima.service.authenticator.LogoutService>}.
     */
    @Override
    public br.com.mobiclub.quantoprima.service.authenticator.LogoutService get() {
      return module.provideLogoutService(context.get(), accountManager.get());
    }
  }

  /**
   * A {@code Binder<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider} and its
   * dependencies.
   * 
   * Being a {@code Provider<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideApiKeyProviderProvidesAdapter extends Binding<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider>
      implements Provider<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider> {
    private final ServiceModule module;
    private Binding<android.accounts.AccountManager> accountManager;

    public ProvideApiKeyProviderProvidesAdapter(ServiceModule module) {
      super("br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider", null, NOT_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideApiKeyProvider()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      accountManager = (Binding<android.accounts.AccountManager>) linker.requestBinding("android.accounts.AccountManager", ServiceModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(accountManager);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider>}.
     */
    @Override
    public br.com.mobiclub.quantoprima.service.authenticator.ApiKeyProvider get() {
      return module.provideApiKeyProvider(accountManager.get());
    }
  }

  /**
   * A {@code Binder<com.google.gson.Gson>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Being a {@code Provider<com.google.gson.Gson>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideGsonProvidesAdapter extends Binding<com.google.gson.Gson>
      implements Provider<com.google.gson.Gson> {
    private final ServiceModule module;

    public ProvideGsonProvidesAdapter(ServiceModule module) {
      super("com.google.gson.Gson", null, NOT_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideGson()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.google.gson.Gson>}.
     */
    @Override
    public com.google.gson.Gson get() {
      return module.provideGson();
    }
  }

  /**
   * A {@code Binder<br.com.mobiclub.quantoprima.core.service.RestErrorHandler>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code br.com.mobiclub.quantoprima.core.service.RestErrorHandler} and its
   * dependencies.
   * 
   * Being a {@code Provider<br.com.mobiclub.quantoprima.core.service.RestErrorHandler>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestErrorHandlerProvidesAdapter extends Binding<br.com.mobiclub.quantoprima.core.service.RestErrorHandler>
      implements Provider<br.com.mobiclub.quantoprima.core.service.RestErrorHandler> {
    private final ServiceModule module;
    private Binding<com.squareup.otto.Bus> bus;

    public ProvideRestErrorHandlerProvidesAdapter(ServiceModule module) {
      super("br.com.mobiclub.quantoprima.core.service.RestErrorHandler", null, NOT_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideRestErrorHandler()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      bus = (Binding<com.squareup.otto.Bus>) linker.requestBinding("com.squareup.otto.Bus", ServiceModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(bus);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<br.com.mobiclub.quantoprima.core.service.RestErrorHandler>}.
     */
    @Override
    public br.com.mobiclub.quantoprima.core.service.RestErrorHandler get() {
      return module.provideRestErrorHandler(bus.get());
    }
  }

  /**
   * A {@code Binder<br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   * 
   * Owning the dependency links between {@code br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor} and its
   * dependencies.
   * 
   * Being a {@code Provider<br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideRestAdapterRequestInterceptorProvidesAdapter extends Binding<br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor>
      implements Provider<br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor> {
    private final ServiceModule module;
    private Binding<br.com.mobiclub.quantoprima.domain.UserAgentProvider> userAgentProvider;

    public ProvideRestAdapterRequestInterceptorProvidesAdapter(ServiceModule module) {
      super("br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor", null, NOT_SINGLETON, "br.com.mobiclub.quantoprima.config.module.ServiceModule.provideRestAdapterRequestInterceptor()");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      userAgentProvider = (Binding<br.com.mobiclub.quantoprima.domain.UserAgentProvider>) linker.requestBinding("br.com.mobiclub.quantoprima.domain.UserAgentProvider", ServiceModule.class);
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(userAgentProvider);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor>}.
     */
    @Override
    public br.com.mobiclub.quantoprima.core.service.RestAdapterRequestInterceptor get() {
      return module.provideRestAdapterRequestInterceptor(userAgentProvider.get());
    }
  }
}
