// Code generated by dagger-compiler.  Do not edit.
package br.com.mobiclub.quantoprima.ui.activity;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<InjectorActivity>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code InjectorActivity} and its
 * dependencies.
 * 
 * Being a {@code Provider<InjectorActivity>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<InjectorActivity>} and handling injection
 * of annotated fields.
 */
public final class InjectorActivity$$InjectAdapter extends Binding<InjectorActivity>
    implements Provider<InjectorActivity>, MembersInjector<InjectorActivity> {
  private Binding<com.squareup.otto.Bus> eventBus;

  public InjectorActivity$$InjectAdapter() {
    super("br.com.mobiclub.quantoprima.ui.activity.InjectorActivity", "members/br.com.mobiclub.quantoprima.ui.activity.InjectorActivity", NOT_SINGLETON, InjectorActivity.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    eventBus = (Binding<com.squareup.otto.Bus>) linker.requestBinding("com.squareup.otto.Bus", InjectorActivity.class);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(eventBus);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<InjectorActivity>}.
   */
  @Override
  public InjectorActivity get() {
    InjectorActivity result = new InjectorActivity();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<InjectorActivity>}.
   */
  @Override
  public void injectMembers(InjectorActivity object) {
    object.eventBus = eventBus.get();
  }
}
