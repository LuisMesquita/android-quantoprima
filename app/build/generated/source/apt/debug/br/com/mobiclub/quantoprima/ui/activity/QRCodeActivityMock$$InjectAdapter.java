// Code generated by dagger-compiler.  Do not edit.
package br.com.mobiclub.quantoprima.ui.activity;


import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binder<QRCodeActivityMock>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 * 
 * Owning the dependency links between {@code QRCodeActivityMock} and its
 * dependencies.
 * 
 * Being a {@code Provider<QRCodeActivityMock>} and handling creation and
 * preparation of object instances.
 * 
 * Being a {@code MembersInjector<QRCodeActivityMock>} and handling injection
 * of annotated fields.
 */
public final class QRCodeActivityMock$$InjectAdapter extends Binding<QRCodeActivityMock>
    implements Provider<QRCodeActivityMock>, MembersInjector<QRCodeActivityMock> {
  private Binding<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider> serviceProvider;
  private Binding<MobiClubFragmentActivity> supertype;

  public QRCodeActivityMock$$InjectAdapter() {
    super("br.com.mobiclub.quantoprima.ui.activity.QRCodeActivityMock", "members/br.com.mobiclub.quantoprima.ui.activity.QRCodeActivityMock", NOT_SINGLETON, QRCodeActivityMock.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    serviceProvider = (Binding<br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider>) linker.requestBinding("br.com.mobiclub.quantoprima.core.service.MobiClubServiceProvider", QRCodeActivityMock.class);
    supertype = (Binding<MobiClubFragmentActivity>) linker.requestBinding("members/br.com.mobiclub.quantoprima.ui.activity.MobiClubFragmentActivity", QRCodeActivityMock.class, false, true);
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(serviceProvider);
    injectMembersBindings.add(supertype);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<QRCodeActivityMock>}.
   */
  @Override
  public QRCodeActivityMock get() {
    QRCodeActivityMock result = new QRCodeActivityMock();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<QRCodeActivityMock>}.
   */
  @Override
  public void injectMembers(QRCodeActivityMock object) {
    object.serviceProvider = serviceProvider.get();
    supertype.injectMembers(object);
  }
}
